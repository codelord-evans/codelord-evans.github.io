{"version":3,"file":"classDiagram-17eafd8a.js","sources":["../src/diagrams/class/classRenderer.js","../src/diagrams/class/classDiagram.ts"],"sourcesContent":["import { select } from 'd3';\nimport { layout as dagreLayout } from 'dagre-d3-es/src/dagre/index.js';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport svgDraw from './svgDraw';\nimport { configureSvgSize } from '../../setupGraphViewbox';\nimport { getConfig } from '../../config';\n\nlet idCache = {};\nconst padding = 20;\n\n/**\n * Gets the ID with the same label as in the cache\n *\n * @param {string} label The label to look for\n * @returns {string} The resulting ID\n */\nconst getGraphId = function (label) {\n  const foundEntry = Object.entries(idCache).find((entry) => entry[1].label === label);\n\n  if (foundEntry) {\n    return foundEntry[0];\n  }\n};\n\n/**\n * Setup arrow head and define the marker. The result is appended to the svg.\n *\n * @param {SVGSVGElement} elem The SVG element to append to\n */\nconst insertMarkers = function (elem) {\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,7 L18,13 V 1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'extensionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 1,1 V 13 L18,7 Z'); // this is actual shape for arrowhead\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'compositionEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'aggregationEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyStart')\n    .attr('class', 'extension')\n    .attr('refX', 0)\n    .attr('refY', 7)\n    .attr('markerWidth', 190)\n    .attr('markerHeight', 240)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 5,7 L9,13 L1,7 L9,1 Z');\n\n  elem\n    .append('defs')\n    .append('marker')\n    .attr('id', 'dependencyEnd')\n    .attr('refX', 19)\n    .attr('refY', 7)\n    .attr('markerWidth', 20)\n    .attr('markerHeight', 28)\n    .attr('orient', 'auto')\n    .append('path')\n    .attr('d', 'M 18,7 L9,13 L14,7 L9,1 Z');\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param {string} text\n * @param {string} id\n * @param {any} _version\n * @param diagObj\n */\nexport const draw = function (text, id, _version, diagObj) {\n  const conf = getConfig().class;\n  idCache = {};\n  // diagObj.db.clear();\n  // diagObj.parser.parse(text);\n\n  log.info('Rendering diagram ' + text);\n\n  const securityLevel = getConfig().securityLevel;\n  // Handle root and Document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n\n  // Fetch the default direction, use TD if none was found\n  const diagram = root.select(`[id='${id}']`);\n  insertMarkers(diagram);\n\n  // Layout graph, Create a new directed graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n  });\n\n  // Set an object for the graph label\n  g.setGraph({\n    isMultiGraph: true,\n  });\n\n  // Default to assigning a new object as a label for each new edge.\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const classes = diagObj.db.getClasses();\n  const keys = Object.keys(classes);\n\n  for (const key of keys) {\n    const classDef = classes[key];\n    const node = svgDraw.drawClass(diagram, classDef, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n\n    log.info('Org height: ' + node.height);\n  }\n\n  const relations = diagObj.db.getRelations();\n  relations.forEach(function (relation) {\n    log.info(\n      'tjoho' + getGraphId(relation.id1) + getGraphId(relation.id2) + JSON.stringify(relation)\n    );\n    g.setEdge(\n      getGraphId(relation.id1),\n      getGraphId(relation.id2),\n      {\n        relation: relation,\n      },\n      relation.title || 'DEFAULT'\n    );\n  });\n\n  const notes = diagObj.db.getNotes();\n  notes.forEach(function (note) {\n    log.debug(`Adding note: ${JSON.stringify(note)}`);\n    const node = svgDraw.drawNote(diagram, note, conf, diagObj);\n    idCache[node.id] = node;\n\n    // Add nodes to the graph. The first argument is the node id. The second is\n    // metadata about the node. In this case we're going to add labels to each of\n    // our nodes.\n    g.setNode(node.id, node);\n    if (note.class && note.class in classes) {\n      g.setEdge(\n        note.id,\n        getGraphId(note.class),\n        {\n          relation: {\n            id1: note.id,\n            id2: note.class,\n            relation: {\n              type1: 'none',\n              type2: 'none',\n              lineType: 10,\n            },\n          },\n        },\n        'DEFAULT'\n      );\n    }\n  });\n\n  dagreLayout(g);\n  g.nodes().forEach(function (v) {\n    if (v !== undefined && g.node(v) !== undefined) {\n      log.debug('Node ' + v + ': ' + JSON.stringify(g.node(v)));\n      root\n        .select('#' + (diagObj.db.lookUpDomId(v) || v))\n        .attr(\n          'transform',\n          'translate(' +\n            (g.node(v).x - g.node(v).width / 2) +\n            ',' +\n            (g.node(v).y - g.node(v).height / 2) +\n            ' )'\n        );\n    }\n  });\n\n  g.edges().forEach(function (e) {\n    if (e !== undefined && g.edge(e) !== undefined) {\n      log.debug('Edge ' + e.v + ' -> ' + e.w + ': ' + JSON.stringify(g.edge(e)));\n      svgDraw.drawEdge(diagram, g.edge(e), g.edge(e).relation, conf, diagObj);\n    }\n  });\n\n  const svgBounds = diagram.node().getBBox();\n  const width = svgBounds.width + padding * 2;\n  const height = svgBounds.height + padding * 2;\n\n  configureSvgSize(diagram, height, width, conf.useMaxWidth);\n\n  // Ensure the viewBox includes the whole svgBounds area with extra space for padding\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  diagram.attr('viewBox', vBox);\n};\n\nexport default {\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["idCache","padding","getGraphId","label","foundEntry","entry","insertMarkers","elem","draw","text","id","_version","diagObj","conf","getConfig","log","securityLevel","sandboxElement","select","root","diagram","g","graphlib.Graph","classes","keys","key","classDef","node","svgDraw","relation","note","dagreLayout","v","e","svgBounds","width","height","configureSvgSize","vBox","renderer","parser","db","styles","cnf"],"mappings":"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"}